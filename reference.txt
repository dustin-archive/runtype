
const x = {
  foo: [
    { type: 'string' },
    { type: 'number' }
  ],
  bar: [
    { type: 'array', arrayTypes: ['string', 'number'] }
  ],
  baz: [
    { type: 'array', arrayTypes: ['string'] },
    { type: 'array', arrayTypes: ['number'] }
  ]
}

any
boolean
never
null
number
object
string
undefined
void

const structure = {
  object: 'object',
  never: 'never',
  null: 'null',
  _undefined: 'undefined',
  void: 'void',
  any: 'any',
  boolean: 'boolean',
  number: 'number',
  string: 'string',
  tuple: '[string, number]',
  stringArrayAndNumberArray: '(string | number)[]',
  stringArrayOrNumberArray: 'string[] | number[]',
  $optionalObject: {
    required: 'string'
  }
}

runtype(data, {
  interface: {
    foo: '(string | Bar)[]'
  },
  references: {
    Bar: {
      baz: '(string | boolean)[]'
    }
  }
})

runtype(data, {
  foobar: 'string',
  foobar: 'string | number',
  foobar: '(string | number)[]',
  foobar: '((string | number)[] | number)[] | boolean',
  foobar: '(({ foo: 'string' })[] | boolean',
  foobar: {
    foo: 'string'
  }
})

runtype({
  data: data.goes.here,
  interface: {
    foo: '(string | Bar)[]'
  },
  references: {
    Bar: {
      baz: '(string | boolean)[]'
    }
  }
})

type = "number" | "string" | "boolean"
array = "(" type ")[]"
