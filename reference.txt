
// # simple solution
const target = []
const arr = input.split('|')
for (let i = 0; i < arr.length; i++) {
  target[i] = endsWithBrackets(arr[i])
}
return target

{
  foo: [
    type: 'array',
    arrayTypes: [
      {
        type: 'string'
      },
      {
        type: 'array',
        arrayTypes: [
          { type: 'string' },
          { type: 'number' }
        ]
      }
    ]
  ]
}

// tests
console.log(parse('string'))
console.log(parse('string[]'))
console.log(parse('string[]|number[]'))
console.log(parse('aa|bbcc|ddeeff|gghhiijj'))
console.log(parse('aa|bbcc[]|ddeeff|gghhiijj'))
console.log(parse('(string|number)[]'))
console.log(parse('(string[]|number)[]'))
console.log(
  JSON.stringify(
    parse('(((string|number)[]|number)[]|number)[]'),
    null, 2
  )
)

any
boolean
never
null
number
object
string
undefined
void

const structure = {
  object: 'object',
  never: 'never',
  null: 'null',
  _undefined: 'undefined',
  void: 'void',
  any: 'any',
  boolean: 'boolean',
  number: 'number',
  string: 'string',
  tuple: '[string, number]',
  stringArrayAndNumberArray: '(string | number)[]',
  stringArrayOrNumberArray: 'string[] | number[]',
  $optionalObject: {
    required: 'string'
  }
}

runtype(data, {
  interface: {
    foo: '(string | Bar)[]'
  },
  references: {
    Bar: {
      baz: '(string | boolean)[]'
    }
  }
})

runtype(data, {
  foobar: 'string',
  foobar: 'string | number',
  foobar: '(string | number)[]',
  foobar: '((string | number)[] | number)[] | boolean',
  foobar: '(({ foo: 'string' })[] | boolean',
  foobar: {
    foo: 'string'
  }
})

runtype({
  data: data.goes.here,
  interface: {
    foo: '(string | Bar)[]'
  },
  references: {
    Bar: {
      baz: '(string | boolean)[]'
    }
  }
})
